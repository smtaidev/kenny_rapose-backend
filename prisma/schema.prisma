generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  firstName             String
  lastName              String
  email                 String                 @unique
  password              String
  phone                 String?
  address               String?
  city                  String?
  state                 String?
  zip                   String?
  isEmailVerified       Boolean                @default(false)
  isActive              Boolean                @default(true)
  isDeleted             Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  deletedAt             DateTime?
  gender                Gender?
  lastLoginAt           DateTime?
  otp                   String?
  otpExpiresAt          DateTime?
  passwordResetExpires  DateTime?
  passwordResetToken    String?
  refreshToken          String?
  role                  UserRole               @default(USER)
  aiCredits             Int                    @default(6)
  country               String?
  dateOfBirth           DateTime?
  travelerNumber        String                 @unique @default(uuid())
  breezeWalletBalance   Float                  @default(0)
  stripeCustomerId      String?
  profilePhoto          String?
  coverPhoto            String?
  breezeWalletPurchases BreezeWalletPurchase[]
  creditPurchases       CreditPurchase[]
  payments              Payment[]
  tourBookings          TourBooking[]
  userActivities        UserActivity[]
  cancelRequests        CancelRequest[]
  cart                  Cart[]

  @@map("users")
}

model Cart {
  id           String      @id @default(uuid())
  userId       String
  tourPackageId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tourPackage  TourPackage @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  
  @@unique([userId, tourPackageId])
  @@map("carts")
}

model Subscription {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model AiCreditPackage {
  id              String           @id @default(uuid())
  name            String
  credits         Int
  price           Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  status          AIPackageStatus  @default(ACTIVE)
  isDeleted       Boolean          @default(false)
  creditPurchases CreditPurchase[]

  @@map("ai_credit_packages")
}

model TourPackage {
  id                 String            @id @default(uuid())
  packageName        String
  totalMembers       Int?
  pricePerPerson     Float?
  startDay           DateTime?
  endDay             DateTime?
  citiesVisited      String[]
  tourType           String?
  activities         String[]
  dailyActivity      Json?
  highlights         String?
  description        String?
  photos             String[]
  status             TourPackageStatus @default(ACTIVE)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deletedAt          DateTime?
  about              String
  additionalInfo     String[]
  ageRangeFrom       Int
  ageRangeTo         Int
  breezeCredit       Int
  cancellationPolicy String[]
  help               String
  star               Float
  whatIncluded       String[]
  whatNotIncluded    String[]
  packageCategory    String
  packagePriceAdult  Float
  packagePriceChild  Float
  packagePriceInfant Float             @default(0)
  tourBookings       TourBooking[]
  cart               Cart[]

  @@map("tour_packages")
}

model BreezeWalletPackage {
  id                    String                    @id @default(uuid())
  name                  String
  amount                Float
  price                 Float
  status                BreezeWalletPackageStatus @default(ACTIVE)
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  isDeleted             Boolean                   @default(false)
  breezeWalletPurchases BreezeWalletPurchase[]

  @@map("breeze_wallet_packages")
}

model CreditPurchase {
  id                String               @id @default(uuid())
  userId            String
  paymentId         String               @unique
  aiCreditPackageId String
  creditsPurchased  Int
  amountPaid        Float
  status            CreditPurchaseStatus @default(PENDING)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  aiCreditPackage   AiCreditPackage      @relation(fields: [aiCreditPackageId], references: [id])
  payment           Payment              @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_purchases")
}

model BreezeWalletPurchase {
  id                    String               @id @default(uuid())
  userId                String
  paymentId             String               @unique
  breezeWalletPackageId String
  amountPurchased       Float
  amountPaid            Float
  status                CreditPurchaseStatus @default(PENDING)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  breezeWalletPackage   BreezeWalletPackage  @relation(fields: [breezeWalletPackageId], references: [id])
  payment               Payment              @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("breeze_wallet_purchases")
}

model TourBooking {
  id                  String              @id @default(uuid())
  userId              String
  paymentId           String              @unique
  tourPackageId       String
  adults              Int                 @default(0)
  children            Int                 @default(0)
  infants             Int                 @default(0)
  totalAmount         Float
  status              BookingStatus       @default(PENDING)
  cancelRequestStatus CancelRequestStatus?
  bookingDate         DateTime            @default(now())
  travelDate          DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  payment             Payment             @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  tourPackage         TourPackage         @relation(fields: [tourPackageId], references: [id])
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  cancelRequests      CancelRequest[]

  @@map("tour_bookings")
}

model Payment {
  id                   String                @id @default(uuid())
  userId               String
  amount               Float
  currency             String                @default("USD")
  status               PaymentStatus         @default(PENDING)
  paymentIntentId      String?
  checkoutSessionId    String?
  paymentMethod        String?               // STRIPE or PAYPAL
  externalPaymentId    String?               // PayPal order ID or Stripe payment intent ID
  metadata             Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  breezeWalletPurchase BreezeWalletPurchase?
  creditPurchase       CreditPurchase?
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tourBooking          TourBooking?

  @@map("payments")
}

model UserActivity {
  id            String       @id @default(uuid())
  userId        String
  type          ActivityType
  title         String
  message       String
  metadata      Json?
  isReadByUser  Boolean      @default(false)
  isReadByAdmin Boolean      @default(false)
  createdAt     DateTime     @default(now())
  isDeleted     Boolean      @default(false)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model UserAssistance {
  id          String                @id @default(uuid())
  firstName   String
  lastName    String
  phoneNumber String
  email       String
  concern     String
  status      UserAssistanceStatus  @default(PENDING)
  response    String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  @@map("user_assistance")
}

model Itinerary {
  id              String          @id @default(uuid())
  aiResponse      Json?
  userInfo        Json?
  status          ItineraryStatus @default(PENDING)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("itineraries")
}

model CancelRequest {
  id            String              @id @default(uuid())
  userId        String
  tourBookingId String
  status        CancelRequestStatus
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  tourBooking   TourBooking         @relation(fields: [tourBookingId], references: [id], onDelete: Cascade)
  
  @@map("cancel_requests")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
}

enum AIPackageStatus {
  ACTIVE
  INACTIVE
}

enum TourPackageStatus {
  ACTIVE
  INACTIVE
}

enum BreezeWalletPackageStatus {
  ACTIVE
  INACTIVE
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

enum CreditPurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum ActivityType {
  AI_CREDIT_PURCHASE
  WALLET_TOPUP
  TOUR_BOOKING
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  LOGIN
  PROFILE_UPDATE
}

enum UserAssistanceStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ItineraryStatus {
  PENDING
  COMPLETED
  FAILED
}

enum CancelRequestStatus {
  PENDING
  APPROVED
  REJECTED
}
