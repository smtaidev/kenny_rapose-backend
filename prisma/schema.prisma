generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  travelerNumber String @unique @default(uuid())
  firstName String
  lastName  String
  email     String @unique
  password  String
  gender    Gender?
  dateOfBirth DateTime?
  phone     String?
  address   String?
  city      String?
  state     String?
  zip       String?
  country   String?

  isEmailVerified Boolean @default(false)
  role            UserRole @default(USER)
  isActive        Boolean @default(true)
  aiCredits       Int     @default(6)
  breezeWalletBalance Float @default(0) // Breeze Wallet balance

  // Stripe customer ID for payments
  stripeCustomerId String?
  
  // OTP for password reset and verification
  otp          String?
  otpExpiresAt DateTime?
  
  // Refresh token for authentication
  refreshToken String?
  
  // Password reset fields
  passwordResetToken   String?
  passwordResetExpires DateTime?
  lastLoginAt         DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  payments Payment[]
  creditPurchases CreditPurchase[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
}

model AiCreditPackage {
  id        String @id @default(uuid())
  name      String
  credits   Int
  price     Float
  status    AIPackageStatus @default(ACTIVE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creditPurchases CreditPurchase[]

  @@map("ai_credit_packages")
}

enum AIPackageStatus {
  ACTIVE
  INACTIVE
}

model TourPackage {
  id            String @id @default(uuid())
  packageName   String
  about         String
  star          Float  // Rating (e.g., 4.5)
  packagePrice  Float  // Total package price
  ageRangeFrom  Int    // Minimum age
  ageRangeTo    Int    // Maximum age
  tourDuration  Int    // Duration in days
  whatIncluded  String[] // Array of included items
  whatNotIncluded String[] // Array of excluded items
  additionalInfo String[] // Array of additional information
  cancellationPolicy String[] // Array of cancellation policies
  help          String
  breezeCredit  Int    // Breeze credit value
  
  // Legacy fields (keeping for backward compatibility)
  totalMembers  Int?
  pricePerPerson Float?
  startDay      DateTime?
  endDay        DateTime?
  citiesVisited String[] // Array of cities
  tourType      String?
  activities    String[] // Array of activities
  dailyActivity Json?    // Daily activity object with day1, day2, etc.
  highlights    String?
  description  String?
  photos       String[] // Array of photo URLs
  status       TourPackageStatus @default(ACTIVE)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime? // Soft delete

  @@map("tour_packages")
}

enum TourPackageStatus {
  ACTIVE
  INACTIVE
}

model BreezeWalletPackage {
  id        String @id @default(uuid())
  name      String
  amount    Float
  price     Float
  status    BreezeWalletPackageStatus @default(ACTIVE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("breeze_wallet_packages")
}

enum BreezeWalletPackageStatus {
  ACTIVE
  INACTIVE
}

// Payment tracking model
model Payment {
  id            String @id @default(uuid())
  userId        String
  amount        Float
  currency      String @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentIntentId String? // Stripe Payment Intent ID
  checkoutSessionId String? // Stripe Checkout Session ID
  metadata      Json? // Additional payment metadata
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditPurchase CreditPurchase?

  @@map("payments")
}

// AI Credit purchase tracking
model CreditPurchase {
  id                String @id @default(uuid())
  userId            String
  paymentId         String @unique // One-to-one relation with Payment
  aiCreditPackageId String
  creditsPurchased  Int
  amountPaid        Float
  status            CreditPurchaseStatus @default(PENDING)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  aiCreditPackage AiCreditPackage @relation(fields: [aiCreditPackageId], references: [id])

  @@map("credit_purchases")
}

// Payment status enum
enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

// Credit purchase status enum
enum CreditPurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
