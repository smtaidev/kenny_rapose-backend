generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  travelerNumber String @unique @default(uuid())
  firstName String
  lastName  String
  email     String @unique
  password  String
  gender    Gender?
  dateOfBirth DateTime?
  phone     String?
  address   String?
  city      String?
  state     String?
  zip       String?
  country   String?

  isEmailVerified Boolean @default(false)
  role            UserRole @default(USER)
  isActive        Boolean @default(true)
  aiCredits       Int     @default(6)
  breezeWalletBalance Float @default(0) // Breeze Wallet balance

  // Stripe customer ID for payments
  stripeCustomerId String?
  
  // OTP for password reset and verification
  otp          String?
  otpExpiresAt DateTime?
  
  // Refresh token for authentication
  refreshToken String?
  
  // Password reset fields
  passwordResetToken   String?
  passwordResetExpires DateTime?
  lastLoginAt         DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  payments Payment[]
  creditPurchases CreditPurchase[]
  breezeWalletPurchases BreezeWalletPurchase[]
  tourBookings TourBooking[]
  userActivities UserActivity[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
}

model AiCreditPackage {
  id        String @id @default(uuid())
  name      String
  credits   Int
  price     Float
  status    AIPackageStatus @default(ACTIVE)
  isDeleted Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creditPurchases CreditPurchase[]

  @@map("ai_credit_packages")
}

enum AIPackageStatus {
  ACTIVE
  INACTIVE
}

model TourPackage {
  id                String @id @default(uuid())
  packageName       String
  about             String
  star              Float  // Rating (e.g., 4.5)
  packagePriceAdult Float  // Adult package price
  packagePriceChild Float  // Child package price
  packagePriceInfant Float @default(0) // Infant package price
  packageCategory   String // Package category (e.g., "Adventure", "Cultural", "Relaxation")
  ageRangeFrom      Int    // Minimum age
  ageRangeTo        Int    // Maximum age
  whatIncluded      String[] // Array of included items
  whatNotIncluded   String[] // Array of excluded items
  additionalInfo    String[] // Array of additional information
  cancellationPolicy String[] // Array of cancellation policies
  help              String
  breezeCredit      Int    // Breeze credit value
  
  // Legacy fields (keeping for backward compatibility)
  totalMembers      Int?
  pricePerPerson    Float?
  startDay          DateTime?
  endDay            DateTime?
  citiesVisited     String[] // Array of cities
  tourType          String?
  activities        String[] // Array of activities
  dailyActivity     Json?    // Daily activity object with day1, day2, etc.
  highlights        String?
  description       String?
  photos            String[] // Array of photo URLs
  status            TourPackageStatus @default(ACTIVE)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime? // Soft delete

  // Relations
  tourBookings TourBooking[]

  @@map("tour_packages")
}

enum TourPackageStatus {
  ACTIVE
  INACTIVE
}

model BreezeWalletPackage {
  id        String @id @default(uuid())
  name      String
  amount    Float
  price     Float
  status    BreezeWalletPackageStatus @default(ACTIVE)
  isDeleted Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  breezeWalletPurchases BreezeWalletPurchase[]

  @@map("breeze_wallet_packages")
}

enum BreezeWalletPackageStatus {
  ACTIVE
  INACTIVE
}

// AI Credit purchase tracking
model CreditPurchase {
  id                String @id @default(uuid())
  userId            String
  paymentId         String @unique // One-to-one relation with Payment
  aiCreditPackageId String
  creditsPurchased  Int
  amountPaid        Float
  status            CreditPurchaseStatus @default(PENDING)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  aiCreditPackage AiCreditPackage @relation(fields: [aiCreditPackageId], references: [id])

  @@map("credit_purchases")
}

// Breeze Wallet purchase tracking
model BreezeWalletPurchase {
  id                    String @id @default(uuid())
  userId                String
  paymentId             String @unique // One-to-one relation with Payment
  breezeWalletPackageId String
  amountPurchased       Float
  amountPaid            Float
  status                CreditPurchaseStatus @default(PENDING)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  breezeWalletPackage BreezeWalletPackage @relation(fields: [breezeWalletPackageId], references: [id])

  @@map("breeze_wallet_purchases")
}

// Tour booking tracking
model TourBooking {
  id            String @id @default(uuid())
  userId        String
  paymentId     String @unique // One-to-one relation with Payment
  tourPackageId String
  adults        Int    @default(0)
  children      Int    @default(0)
  infants       Int    @default(0)
  totalAmount   Float
  status        BookingStatus @default(PENDING)
  bookingDate   DateTime @default(now())
  travelDate    DateTime?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  tourPackage TourPackage @relation(fields: [tourPackageId], references: [id])

  @@map("tour_bookings")
}

// Payment tracking model
model Payment {
  id            String @id @default(uuid())
  userId        String
  amount        Float
  currency      String @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentIntentId String? // Stripe Payment Intent ID
  checkoutSessionId String? // Stripe Checkout Session ID
  metadata      Json? // Additional payment metadata
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditPurchase CreditPurchase?
  breezeWalletPurchase BreezeWalletPurchase?
  tourBooking TourBooking?

  @@map("payments")
}

// Payment status enum
enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

// Credit purchase status enum
enum CreditPurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Tour booking status enum
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

// User Activity tracking model
model UserActivity {
  id          String   @id @default(uuid())
  userId      String
  type        ActivityType
  title       String   // "AI Credit Package Booked"
  message     String   // "Starter Pack (50 credits) booked successfully"
  metadata    Json?    // Store additional data like package details
  isRead      Boolean  @default(false)
  isDeleted   Boolean  @default(false) // Soft delete flag
  createdAt   DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_activities")
}

// Activity type enum
enum ActivityType {
  AI_CREDIT_PURCHASE
  WALLET_TOPUP
  TOUR_BOOKING
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  LOGIN
  PROFILE_UPDATE
}
